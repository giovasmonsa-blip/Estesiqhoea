-- Crear el botón del menú
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

local menuFrame = Instance.new("Frame")
menuFrame.Size = UDim2.new(0, 200, 0, 50)
menuFrame.Position = UDim2.new(0, 10, 0, 10)
menuFrame.BackgroundColor3 = Color3.fromRGB(255, 0, 0) -- Color rojo
menuFrame.BorderSizePixel = 0
menuFrame.Active = true
menuFrame.Draggable = true
menuFrame.Parent = screenGui

local textLabel = Instance.new("TextLabel")
textLabel.Size = UDim2.new(1, 0, 1, 0)
textLabel.Text = "Menú de Opciones"
textLabel.TextColor3 = Color3.fromRGB(255, 255, 255) -- Color blanco
textLabel.BackgroundTransparency = 1
textLabel.TextScaled = true
textLabel.Parent = menuFrame

-- Variable para controlar el estado del salto doble
local doubleJumpEnabled = false

-- Función para activar/desactivar el salto doble
local function toggleDoubleJump()
    doubleJumpEnabled = not doubleJumpEnabled
    if doubleJumpEnabled then
        textLabel.Text = "Salto Doble: Activado"
    else
        textLabel.Text = "Salto Doble: Desactivado"
    end
end

-- Conectar el clic del botón a la función de toggle
menuFrame.MouseButton1Click:Connect(function()
    if not doubleJumpEnabled then
        toggleDoubleJump()
    end
end)

-- Función para manejar el salto doble
local function onCharacterAdded(character)
    local humanoid = character:WaitForChild("Humanoid")
    local jumpPower = humanoid.JumpPower

    local function onJump()
        if doubleJumpEnabled and humanoid.FloorMaterial == Enum.Material.Air then
            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            wait(0.1)
            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end

    humanoid.Jumping:Connect(onJump)
end

-- Conectar la función al evento de añadido de personaje
game.Players.LocalPlayer.CharacterAdded:Connect(onCharacterAdded)

-- Llamar a la función para el personaje actual
if game.Players.LocalPlayer.Character then
    onCharacterAdded(game.Players.LocalPlayer.Character)
end
